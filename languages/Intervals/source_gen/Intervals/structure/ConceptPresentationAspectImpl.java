package Intervals.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BoundedInterval;
  private ConceptPresentation props_ClosedInterval;
  private ConceptPresentation props_Factorization;
  private ConceptPresentation props_Interval;
  private ConceptPresentation props_IntervalClass;
  private ConceptPresentation props_LeftOpenInterval;
  private ConceptPresentation props_OpenInterval;
  private ConceptPresentation props_RightOpenInterval;
  private ConceptPresentation props_UnboundedInterval;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BoundedInterval:
        if (props_BoundedInterval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BoundedInterval = cpb.create();
        }
        return props_BoundedInterval;
      case LanguageConceptSwitch.ClosedInterval:
        if (props_ClosedInterval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("closed");
          props_ClosedInterval = cpb.create();
        }
        return props_ClosedInterval;
      case LanguageConceptSwitch.Factorization:
        if (props_Factorization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("factorization");
          props_Factorization = cpb.create();
        }
        return props_Factorization;
      case LanguageConceptSwitch.Interval:
        if (props_Interval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Interval = cpb.create();
        }
        return props_Interval;
      case LanguageConceptSwitch.IntervalClass:
        if (props_IntervalClass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_IntervalClass = cpb.create();
        }
        return props_IntervalClass;
      case LanguageConceptSwitch.LeftOpenInterval:
        if (props_LeftOpenInterval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("left open");
          props_LeftOpenInterval = cpb.create();
        }
        return props_LeftOpenInterval;
      case LanguageConceptSwitch.OpenInterval:
        if (props_OpenInterval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("open");
          props_OpenInterval = cpb.create();
        }
        return props_OpenInterval;
      case LanguageConceptSwitch.RightOpenInterval:
        if (props_RightOpenInterval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("right open");
          props_RightOpenInterval = cpb.create();
        }
        return props_RightOpenInterval;
      case LanguageConceptSwitch.UnboundedInterval:
        if (props_UnboundedInterval == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("UnboundedInterval");
          props_UnboundedInterval = cpb.create();
        }
        return props_UnboundedInterval;
    }
    return null;
  }
}
