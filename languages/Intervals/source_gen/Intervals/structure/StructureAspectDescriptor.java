package Intervals.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBoundedInterval = createDescriptorForBoundedInterval();
  /*package*/ final ConceptDescriptor myConceptClosedInterval = createDescriptorForClosedInterval();
  /*package*/ final ConceptDescriptor myConceptFactorization = createDescriptorForFactorization();
  /*package*/ final ConceptDescriptor myConceptInterval = createDescriptorForInterval();
  /*package*/ final ConceptDescriptor myConceptIntervalClass = createDescriptorForIntervalClass();
  /*package*/ final ConceptDescriptor myConceptLeftClosedRightUnboundedInterval = createDescriptorForLeftClosedRightUnboundedInterval();
  /*package*/ final ConceptDescriptor myConceptLeftOpenInterval = createDescriptorForLeftOpenInterval();
  /*package*/ final ConceptDescriptor myConceptLeftOpenRightUnboundedInterval = createDescriptorForLeftOpenRightUnboundedInterval();
  /*package*/ final ConceptDescriptor myConceptLeftUnboundedRightClosedInterval = createDescriptorForLeftUnboundedRightClosedInterval();
  /*package*/ final ConceptDescriptor myConceptLeftUnboundedRightOpenInterval = createDescriptorForLeftUnboundedRightOpenInterval();
  /*package*/ final ConceptDescriptor myConceptOpenInterval = createDescriptorForOpenInterval();
  /*package*/ final ConceptDescriptor myConceptRightOpenInterval = createDescriptorForRightOpenInterval();
  /*package*/ final ConceptDescriptor myConceptUnboundedInterval = createDescriptorForUnboundedInterval();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBoundedInterval, myConceptClosedInterval, myConceptFactorization, myConceptInterval, myConceptIntervalClass, myConceptLeftClosedRightUnboundedInterval, myConceptLeftOpenInterval, myConceptLeftOpenRightUnboundedInterval, myConceptLeftUnboundedRightClosedInterval, myConceptLeftUnboundedRightOpenInterval, myConceptOpenInterval, myConceptRightOpenInterval, myConceptUnboundedInterval);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BoundedInterval:
        return myConceptBoundedInterval;
      case LanguageConceptSwitch.ClosedInterval:
        return myConceptClosedInterval;
      case LanguageConceptSwitch.Factorization:
        return myConceptFactorization;
      case LanguageConceptSwitch.Interval:
        return myConceptInterval;
      case LanguageConceptSwitch.IntervalClass:
        return myConceptIntervalClass;
      case LanguageConceptSwitch.LeftClosedRightUnboundedInterval:
        return myConceptLeftClosedRightUnboundedInterval;
      case LanguageConceptSwitch.LeftOpenInterval:
        return myConceptLeftOpenInterval;
      case LanguageConceptSwitch.LeftOpenRightUnboundedInterval:
        return myConceptLeftOpenRightUnboundedInterval;
      case LanguageConceptSwitch.LeftUnboundedRightClosedInterval:
        return myConceptLeftUnboundedRightClosedInterval;
      case LanguageConceptSwitch.LeftUnboundedRightOpenInterval:
        return myConceptLeftUnboundedRightOpenInterval;
      case LanguageConceptSwitch.OpenInterval:
        return myConceptOpenInterval;
      case LanguageConceptSwitch.RightOpenInterval:
        return myConceptRightOpenInterval;
      case LanguageConceptSwitch.UnboundedInterval:
        return myConceptUnboundedInterval;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBoundedInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.class_(false, true, false);
    b.super_("Intervals.structure.Interval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52916cL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/2062516511483007375");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForClosedInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "ClosedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x4027a593fa60e8e9L);
    b.class_(false, false, false);
    b.super_("Intervals.structure.BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/4622845597498534121");
    b.version(2);
    b.alias("closed");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFactorization() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "Factorization", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x4027a593fa5b6202L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/4622845597498171906");
    b.version(2);
    b.aggregate("classes", 0x4027a593fa5b6203L).target(0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x4027a593fa5b5529L).optional(true).ordered(true).multiple(true).origin("4622845597498171907").done();
    b.alias("factorization");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "Interval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52916cL);
    b.class_(false, true, false);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/2062516511483007340");
    b.version(2);
    b.property("leftBound", 0x1c9f87d6ea529174L).type(PrimitiveTypeId.INTEGER).origin("2062516511483007348").done();
    b.property("leftClosed", 0x1c9f87d6ea52917dL).type(PrimitiveTypeId.BOOLEAN).origin("2062516511483007357").done();
    b.property("leftUnbounded", 0x1c9f87d6ea52916fL).type(PrimitiveTypeId.BOOLEAN).origin("2062516511483007343").done();
    b.property("rightBound", 0x1c9f87d6ea529178L).type(PrimitiveTypeId.INTEGER).origin("2062516511483007352").done();
    b.property("rightClosed", 0x1c9f87d6ea529188L).type(PrimitiveTypeId.BOOLEAN).origin("2062516511483007368").done();
    b.property("rightUnbounded", 0x1c9f87d6ea529171L).type(PrimitiveTypeId.BOOLEAN).origin("2062516511483007345").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntervalClass() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "IntervalClass", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x4027a593fa5b5529L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/4622845597498168617");
    b.version(2);
    b.aggregate("intervals", 0x4027a593fa5b552cL).target(0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52916cL).optional(true).ordered(true).multiple(true).origin("4622845597498168620").done();
    b.alias("interval class");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLeftClosedRightUnboundedInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "LeftClosedRightUnboundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x66abe4b239838a17L);
    b.class_(false, false, false);
    b.super_("Intervals.structure.BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/7398258267006405143");
    b.version(2);
    b.alias("left closed right unbounded");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLeftOpenInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "LeftOpenInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x4027a593fa614a07L);
    b.class_(false, false, false);
    b.super_("Intervals.structure.BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/4622845597498558983");
    b.version(2);
    b.alias("left open");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLeftOpenRightUnboundedInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "LeftOpenRightUnboundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x66abe4b239838a19L);
    b.class_(false, false, false);
    b.super_("Intervals.structure.BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/7398258267006405145");
    b.version(2);
    b.alias("left open right unbounded");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLeftUnboundedRightClosedInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "LeftUnboundedRightClosedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x66abe4b239838a18L);
    b.class_(false, false, false);
    b.super_("Intervals.structure.BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/7398258267006405144");
    b.version(2);
    b.alias("left unbounded right closed");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLeftUnboundedRightOpenInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "LeftUnboundedRightOpenInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x66abe4b239838a1aL);
    b.class_(false, false, false);
    b.super_("Intervals.structure.BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/7398258267006405146");
    b.version(2);
    b.alias("left unbounded right open");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOpenInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "OpenInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x4027a593fa6077b4L);
    b.class_(false, false, false);
    b.super_("Intervals.structure.BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/4622845597498505140");
    b.version(2);
    b.alias("open");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRightOpenInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "RightOpenInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x4027a593fa61534aL);
    b.class_(false, false, false);
    b.super_("Intervals.structure.BoundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52918fL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/4622845597498561354");
    b.version(2);
    b.alias("right open");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnboundedInterval() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("Intervals", "UnboundedInterval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52919bL);
    b.class_(false, false, false);
    b.super_("Intervals.structure.Interval", 0xa53c4e1e842a41bfL, 0x8061e6593f83a038L, 0x1c9f87d6ea52916cL);
    b.origin("r:8fb01888-e80c-47d4-b832-dc7fc620bf9c(Intervals.structure)/2062516511483007387");
    b.version(2);
    return b.create();
  }
}
